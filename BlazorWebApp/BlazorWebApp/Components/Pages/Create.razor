@page "/Create"
@using System.Text
@using System.Text.Json
@using System.Net.Http.Headers
@using System.Text.Json.Serialization
@using Azure
@using System
@using System.Data
@using Microsoft.AspNetCore.Authentication
@using Microsoft.Data.SqlClient

@rendermode InteractiveServer

<PageTitle>Create</PageTitle>

<h1>Create</h1>

<label for="issue">Enter the issue:</label>
<input type="text" id="issue" name="issue" @bind="issue" />
<<<<<<< HEAD
=======

>>>>>>> 2dc76b697f257a9c73503434ed8577396b3dd404

<button type="submit" @onclick="SendData">Send</button>
@code {
    private string issue;
    private static readonly HttpClient client = new HttpClient();

    // LLM values
    private readonly IWebHostEnvironment _env;
    private static string[] keys = System.Environment.GetEnvironmentVariable("aidbkeynew").Split(';');
    
    private static string ApiKey = keys[0];
    private static string Endpoint = keys[1];
    private static string DeploymentId = keys[2];
    private static string ApiVersion = keys[3];
    private static string SystemPrompt = keys[4];

    private double Temperature = 0.5;
    
    private async Task SendData()
    {

        Console.WriteLine("Enviroment" + Environment.GetEnvironmentVariable(""));
        Console.WriteLine(issue);
        Console.WriteLine("63: " + Environment.GetEnvironmentVariable("APIKEY"));
        client.DefaultRequestHeaders.Clear();
        client.DefaultRequestHeaders.Add("api-key", ApiKey);


        var json_data = new
        {
            messages = new[]
            {
                new { role = "system", content = SystemPrompt },
                new { role = "user", content = issue }
            },
            max_tokens = 500,
            temperature = Temperature
        };


        var json = JsonSerializer.Serialize(json_data);
        var content = new StringContent(json, Encoding.UTF8, "application/json"); // Here 'Content-Type' is correctly set

        var url = $"{Endpoint}openai/deployments/{DeploymentId}/chat/completions?api-version={ApiVersion}";
        var response = await client.PostAsync(url, content);

        if (!response.IsSuccessStatusCode)
        {
            return;
        }

        var responseContent = await response.Content.ReadAsStringAsync();
        Console.WriteLine("ResponseContent: " + responseContent);
        try
        {
            JsonDocument jsonDoc = JsonDocument.Parse(responseContent);
            JsonElement root = jsonDoc.RootElement;
            JsonElement choicesArray = root.GetProperty("choices");
            if (!choicesArray.EnumerateArray().Any())
            {
                return;
            }

            Console.WriteLine("102");

            JsonElement firstChoice = choicesArray.EnumerateArray().First();
            JsonElement messageElement;
            if (!(firstChoice.TryGetProperty("message", out messageElement)))
            {
                return;
            }

            Console.WriteLine("110");

            if (!(messageElement.ValueKind == JsonValueKind.Object))
            {
                return;
            }

            // Process messageElement as an object
            Console.WriteLine("92: " + messageElement);

            JsonElement root1 = messageElement;
            JsonElement contentElement = root1.GetProperty("content");

            // Parse the content string as a separate JSON document
            Console.WriteLine("124");

            var temp = contentElement.GetString().Replace("'", "\"");
            JsonDocument innerDoc = JsonDocument.Parse(temp);
            Console.WriteLine("27");

            JsonElement innerRoot = innerDoc.RootElement;
            Console.WriteLine("130");


            string title = innerRoot.GetProperty("title").GetString();
            Console.WriteLine($"Title: {title}");

            string description = innerRoot.GetProperty("description").GetString();
            string serviceName = innerRoot.GetProperty("service Name").GetString();
            string[] labels = innerRoot.GetProperty("labels").EnumerateArray().Select(l => l.GetString()).ToArray();
            title= title.Replace("\"", "'");
            description= description.Replace("\"", "'");
            serviceName= serviceName.Replace("\"","'");
            

            Console.WriteLine($"Description: {description}");
            Console.WriteLine($"Service Name: {serviceName}");
            Console.WriteLine($"Labels: {string.Join(", ", labels)}");
            DbIssue dbIssue = new DbIssue();
            dbIssue.description = description;
            dbIssue.labels = labels;
            dbIssue.title = title;
            dbIssue.serviceName = serviceName;

            //save to db
            string connectionString = System.Environment.GetEnvironmentVariable("keyvaultteam7env");
            try
            {
                using (var conn = new SqlConnection(connectionString))
                {
                    conn.Open();
                    var command = new SqlCommand("SELECT COUNT(*) FROM Issues WHERE title LIKE @title", conn);
                    command.Parameters.Add("@title", SqlDbType.Text).Value = "%" + dbIssue.title + "%";

                    int count = (int)await command.ExecuteScalarAsync();

                    if (count == 0)
                    {
                        //No Duplicate
                        Console.WriteLine("No DUplicate");
                        command = new SqlCommand(
                            "INSERT INTO Issues (title, description, service, labels) VALUES (@title,@description,@service,@labels);",
                            conn);
                        command.Parameters.Add("@title", SqlDbType.Text).Value = dbIssue.title;
                        command.Parameters.AddWithValue("@description", dbIssue.description);
                        command.Parameters.AddWithValue("@service", dbIssue.serviceName);
                        command.Parameters.AddWithValue("@labels", string.Join(';', dbIssue.labels));
                        command.ExecuteNonQuery();
                    }
                    else
                    {
                        //Is Duplicate
                        Console.WriteLine("Duplicate");
                        dbIssue.labels = dbIssue.labels.Concat(new[] { "duplicate" }).ToArray();
                        Console.WriteLine(dbIssue.labels);
                        command = new SqlCommand(
                            "INSERT INTO Issues (title, description, service, labels) VALUES (@title,@description,@service,@labels);",
                            conn);
                        command.Parameters.Add("@title", SqlDbType.Text).Value = dbIssue.title;
                        command.Parameters.AddWithValue("@description", dbIssue.description);
                        command.Parameters.AddWithValue("@service", dbIssue.serviceName);
                        command.Parameters.AddWithValue("@labels", string.Join(';', dbIssue.labels));
                        command.ExecuteNonQuery();

                    }
                }
            }
            catch (Exception e)
            {
                Console.WriteLine(e.Message);
            }

            //To Github
            GitIssue githubIssue = DbIssueToGitIssue(dbIssue);
            Console.WriteLine("GitIssue: " + githubIssue);
            await MakeRequest(githubIssue);


        }
        catch (Exception ex)
        {
            Console.WriteLine("Error parsing JSON: " + ex.Message);
        }





    }

    private static async Task MakeRequest(GitIssue issueData)
    {
        Console.WriteLine("53");
        Console.WriteLine(issueData);

        // Request headers
        client.DefaultRequestHeaders.CacheControl = CacheControlHeaderValue.Parse("no-cache");
        client.DefaultRequestHeaders.Add("Ocp-Apim-Subscription-Key", "31ed80b9e6264b81b70c8abed0a7d156");

        var uri = "https://apim-forstsee-hackathon.azure-api.net/github/Kelag-Hackathon-2024-Team-7/issues";
        // Serialize the JSON object to a string
        var json = JsonSerializer.Serialize(issueData, new JsonSerializerOptions { WriteIndented = true });
        Console.WriteLine(json);

        using (var content = new StringContent(json, Encoding.UTF8, "application/json"))
        {
            HttpResponseMessage response = await client.PostAsync(uri, content);
            Console.WriteLine(response);
        }
    }

    public class DbIssue
    {
        [JsonPropertyName("title")] public string title { get; set; }

        [JsonPropertyName("description")] public string description { get; set; }

        [JsonPropertyName("service-name")] public string serviceName { get; set; }

        [JsonPropertyName("labels")] public string[] labels { get; set; }

        //   public override string ToString() { return $"Title: {title}, Description: {description}, Service Name: {serviceName}, Labels: {string.Join(", ", labels)}"; }
    }

    public static GitIssue DbIssueToGitIssue(DbIssue dbIssue)
    {
        GitIssue a = new GitIssue();
        a.body = dbIssue.description;
        a.Labels = dbIssue.labels;
        a.Title = dbIssue.title;
        return a;
    }

    public static DbIssue GitIssueToDbIssue(GitIssue gitIssue)
    {
        DbIssue a = new DbIssue();
        a.description = gitIssue.body;
        a.labels = gitIssue.Labels;
        a.title = gitIssue.Title;
        return a;
    }

    public class GitIssue
    {
        [JsonPropertyName("title")] public string Title { get; set; }

        [JsonPropertyName("body")] public string body { get; set; }

        [JsonPropertyName("labels")] public string[] Labels { get; set; }

    }

}
